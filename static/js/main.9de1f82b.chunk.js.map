{"version":3,"sources":["logo.svg","reducers/user-reducer.js","reducers/index.js","reducers/dummy-reducer.js","backend/index.js","actions/user-action.js","utility/index.js","components/login.js","components/register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","default_state","is_logged_in","error_message","user","rootReducers","combineReducers","userReducer","state","action","type","payload","dummyReducer","getBackendUrl","process","API","get","path","param","options","axios","delete","post","put","populateUser","setError","getAuthHeader","token","localStorage","getItem","Authorization","email_regex","Login","React","useState","setErrorMessage","dispatch","useDispatch","initialValues","email","password","validate","values","errors","test","onSubmit","credentials","setSubmitting","Promise","resolve","reject","then","response","setItem","data","catch","error","status","message","touched","handleChange","handleBlur","handleSubmit","isSubmitting","name","onChange","onBlur","value","placeholder","disabled","Register","first_name","user_info","App","is_loading","setLoading","useSelector","useEffect","headers","className","src","logo","alt","onClick","clear","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9de1f82b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const default_state = {\r\n    is_logged_in: false,\r\n    error_message: '',\r\n    user: {}\r\n}\r\n\r\nconst userReducer = (state = default_state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return {\r\n                is_logged_in: true,\r\n                user: {...action.payload},\r\n                error_message: default_state.error_message\r\n            }\r\n        case 'CLEAR_USER':\r\n            return {\r\n                is_logged_in: false,\r\n                user: {},\r\n                error_message: default_state.error_message\r\n            }\r\n        case 'SET_ERROR':\r\n            return {\r\n                ...state,\r\n                error_message: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { userReducer }","import { combineReducers } from \"redux\";\r\nimport { userReducer } from \"./user-reducer\";\r\nimport { dummyReducer } from \"./dummy-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n  userReducer,\r\n  dummyReducer,\r\n});\r\n\r\nexport default rootReducers;\r\n","const dummyReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { dummyReducer };\r\n","import axios from \"axios\";\r\n\r\nconst getBackendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3000';\r\nconst API = (() => {\r\n  return {\r\n    get: (path, param, options) => axios.get(`${getBackendUrl}${path}`, param, options),\r\n    delete: (path, param, options) => axios.delete(`${getBackendUrl}${path}`, param, options),\r\n    post: (path, param, options) => axios.post(`${getBackendUrl}${path}`, param, options),\r\n    put: (path, param, options) => axios.put(`${getBackendUrl}${path}`, param, options),\r\n  };\r\n})();\r\n\r\nexport default API;","import API from \"backend\";\r\n\r\nexport const populateUser = (payload) => ({ type: \"SET_USER\", payload });\r\n\r\nexport const clearUser = () => ({ type: \"CLEAR_USER\" });\r\n\r\nexport const setError = (payload) => ({ type: \"SET_ERROR\", payload });\r\n\r\nexport const getAuthHeader = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  return { Authorization: `Bearer ${token}` };\r\n};\r\n\r\nexport const login = (credentials) => (dispatch) => new Promise((resolve, reject) => {\r\n  API.post(\"/user/login\", {\r\n    email: credentials.email,\r\n    password: credentials.password,\r\n  })\r\n    .then((response) => {\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      dispatch(populateUser(response.data.user));\r\n      resolve(response);\r\n    })\r\n    .catch((error) => {\r\n      if (error.response.status === 401) {\r\n        dispatch(setError('Invalid credentials'));\r\n        reject('Invalid credentials')\r\n      } else {\r\n        dispatch(setError(error.message));\r\n        reject(error.message);\r\n      }\r\n    });\r\n});\r\n\r\nexport const register = (user_info) => (dispatch) => new Promise((resolve) => {\r\n  API.post(\"/user/register\", {\r\n    first_name: user_info.first_name,\r\n    email: user_info.email,\r\n    password: user_info.password,\r\n  })\r\n    .then((response) => {\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      dispatch(populateUser(response.data.user));\r\n      resolve(response);\r\n    })\r\n    .catch((error) => {\r\n      dispatch(setError(error.message));\r\n      resolve(error);\r\n    });\r\n});\r\n\r\nexport const logout = () => (dispatch) => new Promise((resolve) => {\r\n  API.post(\"/user/logout\", null, { headers: { ...getAuthHeader() } })\r\n    .then(() => {\r\n      localStorage.clear()\r\n      dispatch(clearUser());\r\n      resolve()\r\n    })\r\n    .catch((error) => {\r\n      dispatch(setError(error.message));\r\n      resolve()\r\n    });\r\n});\r\n\r\nexport const verify = () => (dispatch) => new Promise((resolve) =>{\r\n  API.get(\"/user/profile\", { headers: { ...getAuthHeader() } })\r\n    .then((response) => {\r\n      dispatch(populateUser(response.data));\r\n      resolve(response);\r\n    })\r\n    .catch((error) => {\r\n      if (error.response.status === 401) {\r\n        dispatch(clearUser());\r\n      } else {\r\n        dispatch(setError(error.message));\r\n      }\r\n      resolve(error)\r\n    });\r\n});\r\n","export const email_regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport { login } from \"actions/user-action\";\r\nimport { email_regex } from \"utility\";\r\n\r\nconst Login = () => {\r\n  const [error_message, setErrorMessage] = React.useState('')\r\n  const dispatch = useDispatch();\r\n  const initial_values = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    setSubmitting(true);\r\n    dispatch(login(values)).catch(error => {\r\n      setErrorMessage(error)\r\n      setSubmitting(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>Login</div>\r\n      <Formik\r\n        initialValues={initial_values}\r\n        validate={(values) => {\r\n          const errors = {};\r\n          if (!values.email) {\r\n            errors.email = \"Email Required\";\r\n          } else if (!email_regex.test(values.email)) {\r\n            errors.email = \"Invalid email address\";\r\n          }\r\n\r\n          if (!values.password) {\r\n            errors.password = \"Password Required\";\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              placeholder='Email'\r\n            />\r\n            <span>{errors.email && touched.email && errors.email}</span>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.password}\r\n              placeholder='Password'\r\n            />\r\n            <span>{errors.password && touched.password && errors.password}</span>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n        <span>{error_message}</span>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Formik } from \"formik\";\r\nimport { register } from \"actions/user-action\";\r\nimport { email_regex } from \"utility\";\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n  const initial_values = {\r\n    first_name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    dispatch(register(values))\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>Register</div>\r\n      <Formik\r\n        initialValues={initial_values}\r\n        validate={(values) => {\r\n          const errors = {};\r\n          if (!values.email) {\r\n            errors.email = \"Email Required\";\r\n          } else if (!email_regex.test(values.email)) {\r\n            errors.email = \"Invalid email address\";\r\n          }\r\n\r\n          if (!values.password) {\r\n            errors.password = \"Password Required\";\r\n          }\r\n          if (!values.first_name) {\r\n            errors.first_name = \"First name Required\";\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n        }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"first_name\"\r\n              name=\"first_name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.first_name}\r\n              placeholder='First name'\r\n            />\r\n            <span>{errors.first_name && touched.first_name && errors.first_name}</span>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              placeholder='Email'\r\n            />\r\n            <span>{errors.email && touched.email && errors.email}</span>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.password}\r\n              placeholder='Password'\r\n            />\r\n            <span>{errors.password && touched.password && errors.password}</span>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { verify, logout } from \"actions/user-action\";\nimport { Login, Register } from \"components\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [is_loading, setLoading] = React.useState(true);\n  const { is_logged_in, user, error_message } = useSelector(\n    (state) => state.userReducer\n  );\n  const dispatch = useDispatch();\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  React.useEffect(() => {\n    dispatch(verify()).then(() => {\n      setLoading(false)\n    })\n    \n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {is_loading ? (\n          <>loading...</>\n        ) : (\n          <>\n            {is_logged_in ? (\n              <>\n                <p>You are logged in</p>\n                {user && (\n                  <>\n                    <p>{user.first_name}</p>\n                    <p>{user.email}</p>\n                  </>\n                )}\n                <button className=\"App-link\" onClick={handleLogout}>\n                  Logout\n                </button>\n              </>\n            ) : (\n              <>\n                <p>Signup or signin in</p>\n                <Login />\n                <Register />\n              </>\n            )}\n          </>\n        )}\n      </header>\n      {error_message && <p>{error_message}</p>}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from 'reducers'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}